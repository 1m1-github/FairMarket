#pragma version 8

// A creates bid for B with currency and data attached
// A can cancel and get currency back before
// B trades to receive currency and send receipt to A
// receipt contains data

// central smart contract

// api
// create bid [A]
// cancel bid [A]
// trade [B]
// update params

// create bid
// if 0<min, do not allow 0 lurker
// add box

// cancel bid
// remove bid
// send currency back

// trade
// not with lurker
// remove bid

// structures
//###########

// size=4*8+2*32=96
// box with user name contains own params (updatable)
// see get_params for default

// size=3*32+9*8=168


// FEE_N/FEE_D = FEE is the fraction of the currency_amount kept in the contract
// currently set to 1/10
// does not compile as const
// bytes fee_n = itob(1) [slot 0]
pushint 1
itob
store 0 // fee_n
// bytes fee_d = itob(10) [slot 1]
pushint 10
itob
store 1 // fee_d

// manage code
//###########

// if Txn.ApplicationID == 0:
  txn ApplicationID
  pushint 0
  ==
  bz l0_end
  // then:
    // Handle Create App
    // exit(1)
    pushint 1
    return
  l0_end: // end

// switch Txn.OnCompletion:
txn OnCompletion
pushint 0 // NoOp
==
bnz main
txn OnCompletion
pushint 1 // OptIn
==
bnz opt_in
txn OnCompletion
pushint 2 // CloseOut
==
bnz close_out
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz update_app
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz delete_app
err // unexpected value

// block opt_in
opt_in:
  // Disallow Opt In
  // exit(0)
  pushint 0
  return

// block close_out
close_out:
  // Disallow Closing Out
  // exit(0)
  pushint 0
  return

// block update_app
update_app:
  // Handle Update App
  // Only allow the Creator to update the app
  // assert(Txn.Sender == Global.CreatorAddress)
  txn Sender
  global CreatorAddress
  ==
  assert
  // (for now)
  // exit(1)
  pushint 1
  return

// block delete_app
delete_app:
  // Disallow Delete App
  // exit(0)
  pushint 0
  return

// API
//###########

// block main
main:
  // safety
  // int e = Global.GroupSize [slot 2]
  global GroupSize
  store 2 // e
  // for i in 0:e:
    pushint 0
    store 3 // i
    l1_for:
    load 3 // i
    load 2 // e
    ==
    bnz l1_end
    // assert(Gtxn[i].RekeyTo == Global.ZeroAddress)
    load 3 // i
    gtxns RekeyTo
    global ZeroAddress
    ==
    assert
    // assert(Gtxn[i].AssetCloseTo == Global.ZeroAddress)
    load 3 // i
    gtxns AssetCloseTo
    global ZeroAddress
    ==
    assert
    // assert(Gtxn[i].CloseRemainderTo == Global.ZeroAddress)
    load 3 // i
    gtxns CloseRemainderTo
    global ZeroAddress
    ==
    assert
    load 3 // i
    pushint 1
    +
    store 3 // i
    b l1_for
    l1_end: // end
  
  // main switch
  // switch Txn.ApplicationArgs[0]:
  txna ApplicationArgs 0
  pushbytes "create_bid"
  ==
  bnz create_bid
  txna ApplicationArgs 0
  pushbytes "cancel_bid"
  ==
  bnz cancel_bid
  txna ApplicationArgs 0
  pushbytes "trade"
  ==
  bnz trade
  txna ApplicationArgs 0
  pushbytes "update_params"
  ==
  bnz update_params
  txna ApplicationArgs 0
  pushbytes "opt_out_asa"
  ==
  bnz opt_out_asa
  err // unexpected value

// block opt_out_asa
opt_out_asa:
  // opt_out(Txn.Assets[0])
  txna Assets 0
  callsub __func__opt_out
  // exit(1)
  pushint 1
  return

// block create_bid
create_bid:
  
  // indices
  // int fx_call_ix = 0 [slot 2]
  pushint 0
  store 2 // fx_call_ix
  // int algo_send_ix = 1 [slot 3]
  pushint 1
  store 3 // algo_send_ix
  // int asset_send_ix = 3 [slot 4]
  pushint 3
  store 4 // asset_send_ix
  // int app_call_ix = 2 [slot 5]
  pushint 2
  store 5 // app_call_ix
  
  // check_create_bid(fx_call_ix, algo_send_ix, app_call_ix, asset_send_ix)
  load 2 // fx_call_ix
  load 3 // algo_send_ix
  load 5 // app_call_ix
  load 4 // asset_send_ix
  callsub __func__check_create_bid
  
  // opt_in(Gtxn[asset_send_ix].XferAsset)
  load 4 // asset_send_ix
  gtxns XferAsset
  callsub __func__opt_in
  
  // box_content
  // time
  // bytes time_bytes = itob(Global.LatestTimestamp) [slot 6]
  global LatestTimestamp
  itob
  store 6 // time_bytes
  // bytes bid = time_bytes [slot 7]
  load 6 // time_bytes
  store 7 // bid
  
  // A, b = B
  // bytes a = Txn.Sender [slot 8]
  txn Sender
  store 8 // a
  // bid = concat(bid, a)
  load 7 // bid
  load 8 // a
  concat
  store 7 // bid
  
  // bytes b = Txn.ApplicationArgs[1] [slot 9]
  txna ApplicationArgs 1
  store 9 // b
  // bid = concat(bid, b)
  load 7 // bid
  load 9 // b
  concat
  store 7 // bid
  
  // currency_id
  // bytes currency_id_bytes = itob(Gtxn[asset_send_ix].XferAsset) [slot 10]
  load 4 // asset_send_ix
  gtxns XferAsset
  itob
  store 10 // currency_id_bytes
  // bid = concat(bid, currency_id_bytes)
  load 7 // bid
  load 10 // currency_id_bytes
  concat
  store 7 // bid
  // currency_amount
  // bytes currency_amount_bytes = itob(Gtxn[asset_send_ix].AssetAmount) [slot 11]
  load 4 // asset_send_ix
  gtxns AssetAmount
  itob
  store 11 // currency_amount_bytes
  // bid = concat(bid, currency_amount_bytes)
  load 7 // bid
  load 11 // currency_amount_bytes
  concat
  store 7 // bid
  
  // fx
  // bytes fx = Gtxn[fx_call_ix].LastLog [slot 12]
  load 2 // fx_call_ix
  gtxns LastLog
  store 12 // fx
  // bid = concat(bid, fx)
  load 7 // bid
  load 12 // fx
  concat
  store 7 // bid
  
  // params
  // Params p = get_params(b) [slot 13]
  load 9 // b
  callsub __func__get_params
  store 13 // p
  // bytes chrony_importance_bytes = itob(p.chrony_importance) [slot 14]
  load 13 // p
  pushint 0
  extract_uint64 // chrony_importance
  itob
  store 14 // chrony_importance_bytes
  // bid = concat(bid, chrony_importance_bytes)
  load 7 // bid
  load 14 // chrony_importance_bytes
  concat
  store 7 // bid
  // bytes highroller_importance_bytes = itob(p.highroller_importance) [slot 15]
  load 13 // p
  pushint 8
  extract_uint64 // highroller_importance
  itob
  store 15 // highroller_importance_bytes
  // bid = concat(bid, highroller_importance_bytes)
  load 7 // bid
  load 15 // highroller_importance_bytes
  concat
  store 7 // bid
  // bytes subjective_importance_bytes = itob(p.subjective_importance) [slot 16]
  load 13 // p
  pushint 16
  extract_uint64 // subjective_importance
  itob
  store 16 // subjective_importance_bytes
  // bid = concat(bid, subjective_importance_bytes)
  load 7 // bid
  load 16 // subjective_importance_bytes
  concat
  store 7 // bid
  // bytes min_bytes = itob(p.min) [slot 17]
  load 13 // p
  pushint 24
  extract_uint64 // min
  itob
  store 17 // min_bytes
  // bid = concat(bid, min_bytes)
  load 7 // bid
  load 17 // min_bytes
  concat
  store 7 // bid
  
  // encryption
  // bid = concat(bid, p.encryption_public_key)
  load 7 // bid
  load 13 // p
  extract 64 32 // encryption_public_key
  concat
  store 7 // bid
  
  // data
  // first 58 bytes of Txn.Note is B as string
  // bytes data = extract(59, 0, Txn.Note) [slot 18]
  txn Note
  extract 59 0
  store 18 // data
  // bid = concat(bid, data)
  load 7 // bid
  load 18 // data
  concat
  store 7 // bid
  
  // calc bid_id
  // BID_ID = hash($A$B$CURRENCY_ID$CURRENCY_AMOUNT$DATA)
  // bytes bid_id_prehash [slot 19]
  // bid_id_prehash = concat(Txn.Sender, b)
  txn Sender
  load 9 // b
  concat
  store 19 // bid_id_prehash
  // bid_id_prehash = concat(bid_id_prehash, currency_id_bytes)
  load 19 // bid_id_prehash
  load 10 // currency_id_bytes
  concat
  store 19 // bid_id_prehash
  // bid_id_prehash = concat(bid_id_prehash, currency_amount_bytes)
  load 19 // bid_id_prehash
  load 11 // currency_amount_bytes
  concat
  store 19 // bid_id_prehash
  // bid_id_prehash = concat(bid_id_prehash, data)
  load 19 // bid_id_prehash
  load 18 // data
  concat
  store 19 // bid_id_prehash
  // bytes bid_id = sha512_256(bid_id_prehash) [slot 20]
  load 19 // bid_id_prehash
  sha512_256
  store 20 // bid_id
  
  // log(Txn.Sender)
  // log(b)
  // log(currency_id_bytes)
  // log(currency_amount_bytes)
  // log(data)
  // log(bid_id_prehash)
  // log(bid_id)
  
  // create box
  // int box_existed = box_create(bid_id, len(bid)) [slot 21]
  load 20 // bid_id
  load 7 // bid
  len
  box_create
  store 21 // box_existed
  // assert(box_existed == 1)
  load 21 // box_existed
  pushint 1
  ==
  assert
  // box_replace(bid_id, 0, bid)
  load 20 // bid_id
  pushint 0
  load 7 // bid
  box_replace
  
  // exit(1)
  pushint 1
  return

// block cancel_bid
cancel_bid:
  
  // check_cancel_bid()
  callsub __func__check_cancel_bid
  
  // bytes bid_id = Txn.ApplicationArgs[1] [slot 2]
  txna ApplicationArgs 1
  store 2 // bid_id
  // BidWithoutData bid = get_bid(bid_id) [slot 3]
  load 2 // bid_id
  callsub __func__get_bid
  store 3 // bid
  
  // only A can cancel
  // assert(Txn.Sender == bid.a)
  txn Sender
  load 3 // bid
  extract 8 32 // a
  ==
  assert
  
  // inner_txn:
  itxn_begin
    // TypeEnum: Axfer
    pushint 4 // Axfer
    itxn_field TypeEnum
    // AssetReceiver: bid.a
    load 3 // bid
    extract 8 32 // a
    itxn_field AssetReceiver
    // AssetAmount: bid.currency_amount
    load 3 // bid
    pushint 80
    extract_uint64 // currency_amount
    itxn_field AssetAmount
    // XferAsset: bid.currency_id
    load 3 // bid
    pushint 72
    extract_uint64 // currency_id
    itxn_field XferAsset
    // Fee: 0
    pushint 0
    itxn_field Fee
  itxn_submit
  // end inner_txn
  
  // # # opt-out if no balance? TODO (e.g. return subj currency reserve)
  // # int currency_balance
  // # currency_balance, _ = asset_holding_get(AssetBalance, 0, bid.currency_id)
  // # if currency_balance == 0:
  // #     inner_txn:
  // #         TypeEnum: Axfer
  // #         Sender: Global.CurrentApplicationAddress
  // #         AssetReceiver: bid.owner
  // #         AssetAmount: bid.currency_quantity
  // #         XferAsset: bid.currency_id
  // #         Fee: 0
  // #     end
  // # end
  
  // box
  // _ = box_del(bid_id)
  load 2 // bid_id
  box_del
  pop // discarding value for _
  
  // cancel reduces min_balance
  // send unused gas to Sender
  // int clear_gas_amount = clear_gas() [slot 4]
  callsub __func__clear_gas
  store 4 // clear_gas_amount
  // if 1000 < clear_gas_amount:
    pushint 1000
    load 4 // clear_gas_amount
    <
    bz l2_end
    // then:
      // inner_txn:
      itxn_begin
        // TypeEnum: Pay
        pushint 1 // Pay
        itxn_field TypeEnum
        // Receiver: Txn.Sender
        txn Sender
        itxn_field Receiver
        // Amount: clear_gas_amount
        load 4 // clear_gas_amount
        itxn_field Amount
        // Fee: 0
        pushint 0
        itxn_field Fee
      itxn_submit
      // end inner_txn
    l2_end: // end
  
  // exit(1)
  pushint 1
  return

// block trade
trade:
  // check_trade()
  callsub __func__check_trade
  
  // bytes bid_id = Txn.ApplicationArgs[1] [slot 2]
  txna ApplicationArgs 1
  store 2 // bid_id
  // BidWithoutData bid = get_bid(bid_id) [slot 3]
  load 2 // bid_id
  callsub __func__get_bid
  store 3 // bid
  
  // only B can trade
  // assert(Txn.Sender == bid.b)
  txn Sender
  load 3 // bid
  extract 40 32 // b
  ==
  assert
  
  // send currency to owner
  // bytes currency_amount_bytes = itob(bid.currency_amount) [slot 4]
  load 3 // bid
  pushint 80
  extract_uint64 // currency_amount
  itob
  store 4 // currency_amount_bytes
  // bytes fee_bytes = (currency_amount_bytes b* fee_n) b/ fee_d [slot 5]
  load 4 // currency_amount_bytes
  load 0 // fee_n
  b*
  load 1 // fee_d
  b/
  store 5 // fee_bytes
  // bytes currency_amount_for_b_bytes = currency_amount_bytes b- fee_bytes [slot 6]
  load 4 // currency_amount_bytes
  load 5 // fee_bytes
  b-
  store 6 // currency_amount_for_b_bytes
  // int currency_amount_for_b = btoi(currency_amount_for_b_bytes) [slot 7]
  load 6 // currency_amount_for_b_bytes
  btoi
  store 7 // currency_amount_for_b
  // inner_txn:
  itxn_begin
    // TypeEnum: Axfer
    pushint 4 // Axfer
    itxn_field TypeEnum
    // AssetReceiver: bid.b
    load 3 // bid
    extract 40 32 // b
    itxn_field AssetReceiver
    // AssetAmount: currency_amount_for_b
    load 7 // currency_amount_for_b
    itxn_field AssetAmount
    // XferAsset: bid.currency_id
    load 3 // bid
    pushint 72
    extract_uint64 // currency_id
    itxn_field XferAsset
    // Fee: 0
    pushint 0
    itxn_field Fee
  itxn_submit
  // end inner_txn
  
  // box
  // _ = box_del(bid_id)
  load 2 // bid_id
  box_del
  pop // discarding value for _
  
  // trade reduces min_balance
  // send reply and unused gas to A
  // int clear_gas_amount = clear_gas() [slot 8]
  callsub __func__clear_gas
  store 8 // clear_gas_amount
  // inner_txn:
  itxn_begin
    // TypeEnum: Pay
    pushint 1 // Pay
    itxn_field TypeEnum
    // Receiver: bid.a
    load 3 // bid
    extract 8 32 // a
    itxn_field Receiver
    // Amount: clear_gas_amount
    load 8 // clear_gas_amount
    itxn_field Amount
    // Note: Txn.Note
    txn Note
    itxn_field Note
    // Fee: 0
    pushint 0
    itxn_field Fee
  itxn_submit
  // end inner_txn
  
  // exit(1)
  pushint 1
  return

// block update_params
update_params:
  
  // check_update_params()
  callsub __func__check_update_params
  
  // bytes params_id = Txn.Sender [slot 2]
  txn Sender
  store 2 // params_id
  
  // extract params
  // bytes chrony_importance_bytes = Txn.ApplicationArgs[1] [slot 3]
  txna ApplicationArgs 1
  store 3 // chrony_importance_bytes
  // bytes highroller_importance_bytes = Txn.ApplicationArgs[2] [slot 4]
  txna ApplicationArgs 2
  store 4 // highroller_importance_bytes
  // bytes params = concat(chrony_importance_bytes, highroller_importance_bytes) [slot 5]
  load 3 // chrony_importance_bytes
  load 4 // highroller_importance_bytes
  concat
  store 5 // params
  // bytes subjective_importance_bytes = Txn.ApplicationArgs[3] [slot 6]
  txna ApplicationArgs 3
  store 6 // subjective_importance_bytes
  // params = concat(params, subjective_importance_bytes)
  load 5 // params
  load 6 // subjective_importance_bytes
  concat
  store 5 // params
  // bytes min_bytes = Txn.ApplicationArgs[4] [slot 7]
  txna ApplicationArgs 4
  store 7 // min_bytes
  // params = concat(params, min_bytes)
  load 5 // params
  load 7 // min_bytes
  concat
  store 5 // params
  // bytes description = Txn.ApplicationArgs[5] [slot 8]
  txna ApplicationArgs 5
  store 8 // description
  // params = concat(params, description)
  load 5 // params
  load 8 // description
  concat
  store 5 // params
  // bytes encryption_public_key = Txn.ApplicationArgs[6] [slot 9]
  txna ApplicationArgs 6
  store 9 // encryption_public_key
  // params = concat(params, encryption_public_key)
  load 5 // params
  load 9 // encryption_public_key
  concat
  store 5 // params
  
  // safety
  // assert(len(chrony_importance_bytes) == 8)
  load 3 // chrony_importance_bytes
  len
  pushint 8
  ==
  assert
  // assert(len(highroller_importance_bytes) == 8)
  load 4 // highroller_importance_bytes
  len
  pushint 8
  ==
  assert
  // assert(len(subjective_importance_bytes) == 8)
  load 6 // subjective_importance_bytes
  len
  pushint 8
  ==
  assert
  // assert(len(min_bytes) == 8)
  load 7 // min_bytes
  len
  pushint 8
  ==
  assert
  // assert(len(description) == 32)
  load 8 // description
  len
  pushint 32
  ==
  assert
  // assert(len(encryption_public_key) == 32)
  load 9 // encryption_public_key
  len
  pushint 32
  ==
  assert
  
  // box
  // _ = box_create(params_id, len(params))
  load 2 // params_id
  load 5 // params
  len
  box_create
  pop // discarding value for _
  // box_replace(params_id, 0, params)
  load 2 // params_id
  pushint 0
  load 5 // params
  box_replace
  
  // exit(1)
  pushint 1
  return

// func clear_gas() int:
__func__clear_gas:
// int y [slot 22]
// int own_account_balance [slot 23]
// y, own_account_balance = acct_params_get(AcctBalance, Global.CurrentApplicationAddress)
global CurrentApplicationAddress
acct_params_get AcctBalance
store 22 // y
store 23 // own_account_balance
// log(itob(own_account_balance))
// int own_account_min_balance [slot 24]
// y, own_account_min_balance = acct_params_get(AcctMinBalance, Global.CurrentApplicationAddress)
global CurrentApplicationAddress
acct_params_get AcctMinBalance
store 22 // y
store 24 // own_account_min_balance
// log(itob(own_account_min_balance))

// return own_account_balance - own_account_min_balance
load 23 // own_account_balance
load 24 // own_account_min_balance
-
retsub

// func get_bid(bid_id: bytes) bytes:
__func__get_bid:
store 25 // bid_id
// int bid_exists [slot 26]
// bytes bid_contents [slot 27]
// bid_exists, bid_contents = box_get(bid_id)
load 25 // bid_id
box_get
store 26 // bid_exists
store 27 // bid_contents
// assert(bid_exists == 1)
load 26 // bid_exists
pushint 1
==
assert
// return extract3(bid_contents, 0, BIDWITHOUTDATASIZE)
load 27 // bid_contents
pushint 0
pushint 168 // BIDWITHOUTDATASIZE
extract3
retsub

// func opt_in(asset_id: int):
__func__opt_in:
store 28 // asset_id
// int is_opted_in [slot 29]
// is_opted_in, _ = asset_holding_get(AssetBalance, Global.CurrentApplicationAddress, asset_id)
global CurrentApplicationAddress
load 28 // asset_id
asset_holding_get AssetBalance
store 29 // is_opted_in
pop // discarding value for _
// if is_opted_in == 0:
  load 29 // is_opted_in
  pushint 0
  ==
  bz l3_end
  // then:
    // inner_txn:
    itxn_begin
      // TypeEnum: Axfer
      pushint 4 // Axfer
      itxn_field TypeEnum
      // AssetReceiver: Global.CurrentApplicationAddress
      global CurrentApplicationAddress
      itxn_field AssetReceiver
      // AssetAmount: 0
      pushint 0
      itxn_field AssetAmount
      // XferAsset: asset_id
      load 28 // asset_id
      itxn_field XferAsset
      // Fee: 0
      pushint 0
      itxn_field Fee
    itxn_submit
    // end inner_txn
  l3_end: // end
// return
retsub

// func opt_out(asset_id: int):
__func__opt_out:
store 30 // asset_id
// int is_opted_in [slot 31]
// is_opted_in, _ = asset_holding_get(AssetBalance, Global.CurrentApplicationAddress, asset_id)
global CurrentApplicationAddress
load 30 // asset_id
asset_holding_get AssetBalance
store 31 // is_opted_in
pop // discarding value for _
// if is_opted_in == 1:
  load 31 // is_opted_in
  pushint 1
  ==
  bz l4_end
  // then:
    // inner_txn:
    itxn_begin
      // TypeEnum: Axfer
      pushint 4 // Axfer
      itxn_field TypeEnum
      // AssetReceiver: Global.CurrentApplicationAddress
      global CurrentApplicationAddress
      itxn_field AssetReceiver
      // AssetAmount: 0
      pushint 0
      itxn_field AssetAmount
      // XferAsset: asset_id
      load 30 // asset_id
      itxn_field XferAsset
      // Fee: 0
      pushint 0
      itxn_field Fee
      // AssetCloseTo: Txn.Sender
      txn Sender
      itxn_field AssetCloseTo
    itxn_submit
    // end inner_txn
  l4_end: // end
// return
retsub

// func check_create_bid(fx_call_ix: int, algo_send_ix: int, app_call_ix: int, asset_send_ix: int):
__func__check_create_bid:
store 32 // asset_send_ix
store 33 // app_call_ix
store 34 // algo_send_ix
store 35 // fx_call_ix
// assert(Gtxn[fx_call_ix].TypeEnum == Appl)
load 35 // fx_call_ix
gtxns TypeEnum
pushint 6 // Appl
==
assert
// assert(Gtxn[algo_send_ix].TypeEnum == Pay)
load 34 // algo_send_ix
gtxns TypeEnum
pushint 1 // Pay
==
assert
// assert(Gtxn[app_call_ix].TypeEnum == Appl) # NOT NEEDED, as we are in this Appl
// assert(Gtxn[asset_send_ix].TypeEnum == Axfer)
load 32 // asset_send_ix
gtxns TypeEnum
pushint 4 // Axfer
==
assert

// assert(Gtxn[fx_call_ix].Sender == Gtxn[asset_send_ix].Sender)
load 35 // fx_call_ix
gtxns Sender
load 32 // asset_send_ix
gtxns Sender
==
assert
// assert(Txn.Sender == Gtxn[asset_send_ix].Sender)
txn Sender
load 32 // asset_send_ix
gtxns Sender
==
assert
// assert(Gtxn[algo_send_ix].Sender == Gtxn[asset_send_ix].Sender)
load 34 // algo_send_ix
gtxns Sender
load 32 // asset_send_ix
gtxns Sender
==
assert

// assert(Gtxn[asset_send_ix].AssetReceiver == Global.CurrentApplicationAddress)
load 32 // asset_send_ix
gtxns AssetReceiver
global CurrentApplicationAddress
==
assert
// assert(Gtxn[algo_send_ix].Receiver == Global.CurrentApplicationAddress)
load 34 // algo_send_ix
gtxns Receiver
global CurrentApplicationAddress
==
assert

// assert(Gtxn[fx_call_ix].ApplicationID == FX_APP)
load 35 // fx_call_ix
gtxns ApplicationID
pushint 178969021 // FX_APP
==
assert
// assert(Gtxn[asset_send_ix].XferAsset == Gtxn[fx_call_ix].Assets[0])
load 32 // asset_send_ix
gtxns XferAsset
load 35 // fx_call_ix
gtxnsa Assets 0
==
assert
// assert(Txn.GroupIndex == app_call_ix)
txn GroupIndex
load 33 // app_call_ix
==
assert

// simpler for now
// assert(Global.GroupSize == 4)
global GroupSize
pushint 4
==
assert
// int e = Global.GroupSize
// for i in 4:e:
//     assert(Gtxn[i].TypeEnum == Appl)
// end

// return
retsub

// func check_cancel_bid():
__func__check_cancel_bid:
// assert(Global.GroupSize == 1)
global GroupSize
pushint 1
==
assert
// return
retsub

// func check_trade():
__func__check_trade:
// if Global.GroupSize == 1:
  global GroupSize
  pushint 1
  ==
  bz l5_elif_0
  // then:
    // return
    retsub
  b l5_end
  l5_elif_0:
  // elif Global.GroupSize == 2:
  global GroupSize
  pushint 2
  ==
  bz l5_else
    
    // assert(Gtxn[0].TypeEnum == Axfer)
    gtxn 0 TypeEnum
    pushint 4 // Axfer
    ==
    assert
    // assert(Gtxn[0].AssetAmount == 0)
    gtxn 0 AssetAmount
    pushint 0
    ==
    assert
    
    // assert(Gtxn[0].AssetSender == Txn.Sender)
    gtxn 0 AssetSender
    txn Sender
    ==
    assert
    // assert(Txn.GroupIndex == 1)
    txn GroupIndex
    pushint 1
    ==
    assert
    
    // assert(Gtxn[0].Assets[0] == Txn.Assets[0])
    gtxna 0 Assets 0
    txna Assets 0
    ==
    assert
    
  b l5_end
  l5_else:
  // else:
    // exit(0)
    pushint 0
    return
  l5_end: // end

// return
retsub

// func check_update_params():
__func__check_update_params:
// if Global.GroupSize == 1:
  global GroupSize
  pushint 1
  ==
  bz l6_elif_0
  // then:
    // return
    retsub
  b l6_end
  l6_elif_0:
  // elif Global.GroupSize == 2:
  global GroupSize
  pushint 2
  ==
  bz l6_else
    
    // assert(Gtxn[0].TypeEnum == Pay)
    gtxn 0 TypeEnum
    pushint 1 // Pay
    ==
    assert
    // assert(Gtxn[0].Amount == 53700)
    // assert(Gtxn[0].Sender == Txn.Sender)
    gtxn 0 Sender
    txn Sender
    ==
    assert
    // assert(Gtxn[0].Receiver == Global.CurrentApplicationAddress)
    gtxn 0 Receiver
    global CurrentApplicationAddress
    ==
    assert
    
    // assert(Txn.GroupIndex == 1)
    txn GroupIndex
    pushint 1
    ==
    assert
    
  b l6_end
  l6_else:
  // else:
    // exit(0)
    pushint 0
    return
  l6_end: // end

// return
retsub

// func get_params(b: bytes) bytes:
__func__get_params:
store 36 // b
// from box if exists
// bytes p [slot 37]
// int p_exists [slot 38]
// p_exists, p = box_get(b)
load 36 // b
box_get
store 38 // p_exists
store 37 // p
// if p_exists == 1:
  load 38 // p_exists
  pushint 1
  ==
  bz l7_end
  // then:
    // return p
    load 37 // p
    retsub
  l7_end: // end

// default params

// importances
// p = concat(itob(1), itob(1))
pushint 1
itob
pushint 1
itob
concat
store 37 // p
// p = concat(p, itob(1))
load 37 // p
pushint 1
itob
concat
store 37 // p
// min
// p = concat(p, itob(1))
load 37 // p
pushint 1
itob
concat
store 37 // p
// description
// p = concat(p, "00000000000000000000000000000000")
load 37 // p
pushbytes "00000000000000000000000000000000"
concat
store 37 // p
// encryption_public_key
// p = concat(p, "00000000000000000000000000000000")
load 37 // p
pushbytes "00000000000000000000000000000000"
concat
store 37 // p

// return p
load 37 // p
retsub
