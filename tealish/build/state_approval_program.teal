#pragma version 8

// b 5
// i
// 32+24+8+16+x+8+16
// 256
// global params
// owner [32 bytes]
// chrony/highroller/subjective importance [3xint: 3*=24 bytes] [owner can change]
// min [int: 8 bytes] [owner can change]
// min precision [2xint: 2*8=16 bytes] [owner can change]
// reputation +/- [2xint: 2*8=16 bytes]
// version [int: 8 bytes]
// description [bytes] [owner can change]
// encryption public key [256 bytes = 3 vars]

// box is a bid: (each box element is prefixed with its length)
// txid [bytes] [key]
// parent bid [bytes]
// bidder address [bytes]
// fairmarket address [bytes]
// currency (id, quantity)
// fx (bytes xor 2 ints)
// type (chrony/highroller/subjective/lurker)
// data (bytes)

// bid list = list of txids [boxes]

// reputation list of bidd   ers [boxes]

// api
// create bid [bidder]
// cancel bid [bidder]
// trade [seller] = create bid [bidder]
// add reputation [bidder]
// withdraw [seller]

// create bid
// if 0<min, do not allow 0 lurker
// add box

// cancel bid
// input txid, bidder == txn.Sender
// remove box

// trade
// not with lurker
// add bidder to reputation list
// remove bid
// send fee to treasury in exchange for project coins for bidder and seller

// withdraw
// if amount < locked via bids

// if Txn.ApplicationID == 0:
  txn ApplicationID
  pushint 0
  ==
  bz l0_end
  // then:
    // Handle Create App
    
    // bytes a = Txn.Sender [slot 0]
    txn Sender
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[0])
    load 0 // a
    txna ApplicationArgs 0
    concat
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[1])
    load 0 // a
    txna ApplicationArgs 1
    concat
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[2])
    load 0 // a
    txna ApplicationArgs 2
    concat
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[3])
    load 0 // a
    txna ApplicationArgs 3
    concat
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[4])
    load 0 // a
    txna ApplicationArgs 4
    concat
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[5])
    load 0 // a
    txna ApplicationArgs 5
    concat
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[6])
    load 0 // a
    txna ApplicationArgs 6
    concat
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[7])
    load 0 // a
    txna ApplicationArgs 7
    concat
    store 0 // a
    // a = concat(a, Txn.ApplicationArgs[8])
    load 0 // a
    txna ApplicationArgs 8
    concat
    store 0 // a
    // app_global_put("a", a)
    pushbytes "a"
    load 0 // a
    app_global_put
    
    // app_global_put("d", Txn.ApplicationArgs[9])
    pushbytes "d"
    txna ApplicationArgs 9
    app_global_put
    
    // app_global_put("e1", Txn.ApplicationArgs[10])
    pushbytes "e1"
    txna ApplicationArgs 10
    app_global_put
    // app_global_put("e2", Txn.ApplicationArgs[11])
    pushbytes "e2"
    txna ApplicationArgs 11
    app_global_put
    // app_global_put("e3", Txn.ApplicationArgs[12])
    pushbytes "e3"
    txna ApplicationArgs 12
    app_global_put
    
    // exit(1)
    pushint 1
    return
  l0_end: // end

// switch Txn.OnCompletion:
txn OnCompletion
pushint 0 // NoOp
==
bnz main
txn OnCompletion
pushint 1 // OptIn
==
bnz opt_in
txn OnCompletion
pushint 2 // CloseOut
==
bnz close_out
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz update_app
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz delete_app
err // unexpected value

// block opt_in
opt_in:
  // Disallow Opt In
  // exit(0)
  pushint 0
  return

// block close_out
close_out:
  // Disallow Closing Out
  // exit(0)
  pushint 0
  return

// block update_app
update_app:
  // Handle Update App
  // Only allow the Creator to update the app
  // assert(Txn.Sender == Global.CreatorAddress)
  txn Sender
  global CreatorAddress
  ==
  assert
  // (for now)
  // exit(1)
  pushint 1
  return

// block delete_app
delete_app:
  // Handle Delete App
  // Only allow the Creator to delete the app
  // assert(Txn.Sender == Global.CreatorAddress)
  txn Sender
  global CreatorAddress
  ==
  assert
  // (for now)
  // exit(1)
  pushint 1
  return

// block main
main:
  
  // assert(Txn.RekeyTo == Global.ZeroAddress)
  txn RekeyTo
  global ZeroAddress
  ==
  assert
  
  // switch Txn.ApplicationArgs[0]:
  txna ApplicationArgs 0
  pushbytes "update_params"
  ==
  bnz update_params
  txna ApplicationArgs 0
  pushbytes "create_bid"
  ==
  bnz create_bid
  txna ApplicationArgs 0
  pushbytes "cancel_bid"
  ==
  bnz cancel_bid
  txna ApplicationArgs 0
  pushbytes "add_reputation"
  ==
  bnz add_reputation
  txna ApplicationArgs 0
  pushbytes "withdraw"
  ==
  bnz withdraw
  txna ApplicationArgs 0
  pushbytes "add_data"
  ==
  bnz add_data
  err // unexpected value
  
  // block add:
  //     # Add 2 integers
  //     int x = btoi(Txn.ApplicationArgs[1])
  //     int y = btoi(Txn.ApplicationArgs[2])
  //     int result = x + y
  //     abi_return(abi_encode_uint64(result))
  //     exit(1)
  // end
  
  // block mulw:
  //     # Multiply 2 integers, returing a uint128
  //     bytes x = Txn.ApplicationArgs[1]
  //     bytes y = Txn.ApplicationArgs[2]
  //     bytes result = x b* y
  //     abi_return(abi_encode_uint128(result))
  //     exit(1)
  // end
  
  
  // block hello:
  //     # Return a greeting
  //     bytes name = abi_decode_string(Txn.ApplicationArgs[1])
  //     bytes result = concat("Hello ", name)
  //     abi_return(abi_encode_string(result))
  //     exit(1)
  // end
  
  // block send:
  //     # Send some Algo to the given address
  //     bytes address = Txn.ApplicationArgs[1]
  //     inner_txn:
  //         TypeEnum: Pay
  //         Receiver: address
  //         Amount: 10000000
  //         Fee: 0
  //     end
  //     exit(1)
  // end
  
  // block store_data:
  //     # Store some fixed size data in a box with the specified key
  //     bytes key = Txn.ApplicationArgs[1]
  //     bytes data = Txn.ApplicationArgs[2]
  //     box_put(key, data)
  //     exit(1)
  // end
  
  // block store_tuple:
  //     # Store some structured data in a box with the specified key
  //     bytes key = Txn.ApplicationArgs[1]
  //     # Item data = Txn.ApplicationArgs[2]
  //     # make some assertion about the data for the fun of it
  //     # assert(data.owner == Txn.Sender)
  //     # box_put(key, data)
  //     exit(1)
  // end
  
  // block balance:
  //     # Return balance of the specified account
  //     int result = balance(Txn.Accounts[btoi(Txn.ApplicationArgs[1])])
  //     abi_return(abi_encode_uint64(result))
  //     exit(1)
  // end

// block update_params
update_params:
  // exit(1)
  pushint 1
  return

// block create_bid
create_bid:
  
  // indices
  // int fx_call_ix = 0 [slot 1]
  pushint 0
  store 1 // fx_call_ix
  // int algo_send_ix = 1 [slot 2]
  pushint 1
  store 2 // algo_send_ix
  // int app_call_ix = 2 [slot 3]
  pushint 2
  store 3 // app_call_ix
  // int asset_send_ix = 3 [slot 4]
  pushint 3
  store 4 // asset_send_ix
  // int e = Global.GroupSize-1 [slot 5]
  global GroupSize
  pushint 1
  -
  store 5 // e
  
  // check
  // assert(Gtxn[asset_send_ix].TypeEnum == Axfer)
  load 4 // asset_send_ix
  gtxns TypeEnum
  pushint 4 // Axfer
  ==
  assert
  // assert(Gtxn[asset_send_ix].AssetReceiver == Global.CurrentApplicationAddress)
  load 4 // asset_send_ix
  gtxns AssetReceiver
  global CurrentApplicationAddress
  ==
  assert
  // assert(Gtxn[fx_call_ix].TypeEnum == Appl)
  load 1 // fx_call_ix
  gtxns TypeEnum
  pushint 6 // Appl
  ==
  assert
  // assert(Gtxn[fx_call_ix].Sender == Gtxn[asset_send_ix].Sender)
  load 1 // fx_call_ix
  gtxns Sender
  load 4 // asset_send_ix
  gtxns Sender
  ==
  assert
  // assert(Gtxn[fx_call_ix].ApplicationID == FX_APP)
  load 1 // fx_call_ix
  gtxns ApplicationID
  pushint 178969021 // FX_APP
  ==
  assert
  // assert(Gtxn[asset_send_ix].XferAsset == Gtxn[fx_call_ix].Assets[0])
  load 4 // asset_send_ix
  gtxns XferAsset
  load 1 // fx_call_ix
  gtxnsa Assets 0
  ==
  assert
  // assert(Txn.GroupIndex == app_call_ix)
  txn GroupIndex
  load 3 // app_call_ix
  ==
  assert
  // assert(Txn.Sender == Gtxn[asset_send_ix].Sender)
  txn Sender
  load 4 // asset_send_ix
  gtxns Sender
  ==
  assert
  // assert(Gtxn[algo_send_ix].TypeEnum == Pay)
  load 2 // algo_send_ix
  gtxns TypeEnum
  pushint 1 // Pay
  ==
  assert
  // assert(Gtxn[algo_send_ix].Sender == Gtxn[asset_send_ix].Sender)
  load 2 // algo_send_ix
  gtxns Sender
  load 4 // asset_send_ix
  gtxns Sender
  ==
  assert
  // assert(Gtxn[algo_send_ix].Receiver == Global.CurrentApplicationAddress)
  load 2 // algo_send_ix
  gtxns Receiver
  global CurrentApplicationAddress
  ==
  assert
  // for i in 4:e:
    pushint 4
    store 6 // i
    l1_for:
    load 6 // i
    load 5 // e
    ==
    bnz l1_end
    // assert(Gtxn[i].TypeEnum == Appl)
    load 6 // i
    gtxns TypeEnum
    pushint 6 // Appl
    ==
    assert
    load 6 // i
    pushint 1
    +
    store 6 // i
    b l1_for
    l1_end: // end
  
  // opt-in
  // int asset_id = Gtxn[asset_send_ix].XferAsset [slot 6]
  load 4 // asset_send_ix
  gtxns XferAsset
  store 6 // asset_id
  // int is_opted_in [slot 7]
  // is_opted_in, _ = asset_holding_get(AssetBalance, Global.CurrentApplicationAddress, asset_id)
  global CurrentApplicationAddress
  load 6 // asset_id
  asset_holding_get AssetBalance
  store 7 // is_opted_in
  pop // discarding value for _
  // if is_opted_in == 0:
    load 7 // is_opted_in
    pushint 0
    ==
    bz l2_end
    // then:
      // inner_txn:
      itxn_begin
        // TypeEnum: Axfer
        pushint 4 // Axfer
        itxn_field TypeEnum
        // Sender: Global.CurrentApplicationAddress
        global CurrentApplicationAddress
        itxn_field Sender
        // AssetReceiver: Global.CurrentApplicationAddress
        global CurrentApplicationAddress
        itxn_field AssetReceiver
        // AssetAmount: 0
        pushint 0
        itxn_field AssetAmount
        // XferAsset: asset_id
        load 6 // asset_id
        itxn_field XferAsset
        // Fee: 0
        pushint 0
        itxn_field Fee
      itxn_submit
      // end inner_txn
    l2_end: // end
  
  // box_content
  // bytes box_content = "" [slot 8]
  pushbytes ""
  store 8 // box_content
  // bytes parent_bid = Txn.ApplicationArgs[1]
  // box_content = concat(box_content, Txn.ApplicationArgs[1])
  load 8 // box_content
  txna ApplicationArgs 1
  concat
  store 8 // box_content
  // box_content = concat(box_content, ".")
  load 8 // box_content
  pushbytes "."
  concat
  store 8 // box_content
  // bytes bidder = Txn.Sender
  // box_content = concat(box_content, Txn.Sender)
  load 8 // box_content
  txn Sender
  concat
  store 8 // box_content
  // box_content = concat(box_content, ".")
  load 8 // box_content
  pushbytes "."
  concat
  store 8 // box_content
  // bytes bidder_fairmarket_address = Txn.ApplicationArgs[2]
  // box_content = concat(box_content, Txn.ApplicationArgs[2])
  load 8 // box_content
  txna ApplicationArgs 2
  concat
  store 8 // box_content
  // box_content = concat(box_content, ".")
  load 8 // box_content
  pushbytes "."
  concat
  store 8 // box_content
  // bytes currency_id = itob(Gtxn[asset_send_ix].XferAsset)
  // box_content = concat(box_content, itob(Gtxn[asset_send_ix].XferAsset))
  load 8 // box_content
  load 4 // asset_send_ix
  gtxns XferAsset
  itob
  concat
  store 8 // box_content
  // box_content = concat(box_content, ".")
  load 8 // box_content
  pushbytes "."
  concat
  store 8 // box_content
  // bytes currency_quantity = itob(Gtxn[asset_send_ix].AssetAmount)
  // box_content = concat(box_content, itob(Gtxn[asset_send_ix].AssetAmount))
  load 8 // box_content
  load 4 // asset_send_ix
  gtxns AssetAmount
  itob
  concat
  store 8 // box_content
  // box_content = concat(box_content, ".")
  load 8 // box_content
  pushbytes "."
  concat
  store 8 // box_content
  // bytes fx = Gtxn[fx_call_ix].LastLog [slot 9]
  load 1 // fx_call_ix
  gtxns LastLog
  store 9 // fx
  // box_content = concat(box_content, fx)
  load 8 // box_content
  load 9 // fx
  concat
  store 8 // box_content
  // box_content = concat(box_content, ".")
  load 8 // box_content
  pushbytes "."
  concat
  store 8 // box_content
  
  // bytes type = calc_type(Gtxn[asset_send_ix].AssetAmount, fx) [slot 10]
  load 4 // asset_send_ix
  gtxns AssetAmount
  load 9 // fx
  callsub __func__calc_type
  store 10 // type
  // box_content = concat(box_content, type)
  load 8 // box_content
  load 10 // type
  concat
  store 8 // box_content
  // box_content = concat(box_content, ".")
  load 8 // box_content
  pushbytes "."
  concat
  store 8 // box_content
  
  // int e = Global.GroupSize-1
  // for i in 0:e:
    pushint 0
    store 11 // i
    l3_for:
    load 11 // i
    load 5 // e
    ==
    bnz l3_end
    // box_content = concat(box_content, Gtxn[i].Note)
    load 8 // box_content
    load 11 // i
    gtxns Note
    concat
    store 8 // box_content
    load 11 // i
    pushint 1
    +
    store 11 // i
    b l3_for
    l3_end: // end
  
  // int box_existed = box_create(Txn.ApplicationArgs[3], len(box_content)) [slot 11]
  txna ApplicationArgs 3
  load 8 // box_content
  len
  box_create
  store 11 // box_existed
  // assert(box_existed == 1)
  load 11 // box_existed
  pushint 1
  ==
  assert
  // box_replace(Txn.ApplicationArgs[3], 0, box_content)
  txna ApplicationArgs 3
  pushint 0
  load 8 // box_content
  box_replace
  
  // exit(1)
  pushint 1
  return
  

// block cancel_bid
cancel_bid:
  
  // bytes box_name = Txn.ApplicationArgs[1] [slot 1]
  txna ApplicationArgs 1
  store 1 // box_name
  // int box_exists [slot 2]
  // bytes box_contents [slot 3]
  // box_exists, box_contents = box_get(box_name)
  load 1 // box_name
  box_get
  store 2 // box_exists
  store 3 // box_contents
  // assert(box_exists == 1)
  load 2 // box_exists
  pushint 1
  ==
  assert
  
  // int e [slot 4]
  // parent_bid
  // _, e = get_next_token(box_contents, 0)
  load 3 // box_contents
  pushint 0
  callsub __func__get_next_token
  pop // discarding value for _
  store 4 // e
  // app_global_put("e1", itob(e))
  // log("parent_bid")
  // log(itob(e))
  
  // bidder
  // bytes bidder [slot 5]
  // bidder, e = get_next_token(box_contents, e+1)
  load 3 // box_contents
  load 4 // e
  pushint 1
  +
  callsub __func__get_next_token
  store 5 // bidder
  store 4 // e
  // app_global_put("d", bidder)
  // app_global_put("e2", itob(e))
  // log("bidder")
  // log(bidder)
  // log("e")
  // log(itob(e))
  // log("Txn.Sender")
  // log(Txn.Sender)
  // if Txn.Sender == bidder:
  //     log("Txn.Sender == bidder")
  // else:
  //     log("Txn.Sender != bidder")
  // end
  
  // assert(Txn.Sender == bidder)
  txn Sender
  load 5 // bidder
  ==
  assert
  
  // bidder_fairmarket_address
  // _, e = get_next_token(box_contents, e+1)
  load 3 // box_contents
  load 4 // e
  pushint 1
  +
  callsub __func__get_next_token
  pop // discarding value for _
  store 4 // e
  
  // currency_id
  // bytes currency_id_bytes [slot 6]
  // currency_id_bytes, e = get_next_token(box_contents, e+1)
  load 3 // box_contents
  load 4 // e
  pushint 1
  +
  callsub __func__get_next_token
  store 6 // currency_id_bytes
  store 4 // e
  // int currency_id = btoi(currency_id_bytes) [slot 7]
  load 6 // currency_id_bytes
  btoi
  store 7 // currency_id
  // log("currency_id_bytes")
  pushbytes "currency_id_bytes"
  log
  // log(currency_id_bytes)
  load 6 // currency_id_bytes
  log
  // exit(1)
  
  // currency_quantity
  // bytes currency_quantity_bytes [slot 8]
  // currency_quantity_bytes, e = get_next_token(box_contents, e+1)
  load 3 // box_contents
  load 4 // e
  pushint 1
  +
  callsub __func__get_next_token
  store 8 // currency_quantity_bytes
  store 4 // e
  // int currency_quantity = btoi(currency_quantity_bytes) [slot 9]
  load 8 // currency_quantity_bytes
  btoi
  store 9 // currency_quantity
  // log("currency_quantity_bytes")
  pushbytes "currency_quantity_bytes"
  log
  // log(currency_quantity_bytes)
  load 8 // currency_quantity_bytes
  log
  // exit(1)
  
  // check
  // assert(Txn.Sender == bidder)
  
  // inner_txn:
  itxn_begin
    // TypeEnum: Axfer
    pushint 4 // Axfer
    itxn_field TypeEnum
    // Sender: Global.CurrentApplicationAddress
    global CurrentApplicationAddress
    itxn_field Sender
    // AssetReceiver: bidder
    load 5 // bidder
    itxn_field AssetReceiver
    // AssetAmount: currency_quantity
    load 9 // currency_quantity
    itxn_field AssetAmount
    // XferAsset: currency_id
    load 7 // currency_id
    itxn_field XferAsset
    // Fee: 0
    pushint 0
    itxn_field Fee
  itxn_submit
  // end inner_txn
  
  // _ = box_del(box_name)
  load 1 // box_name
  box_del
  pop // discarding value for _
  
  // exit(1)
  pushint 1
  return

// block add_reputation
add_reputation:
  // exit(1)
  pushint 1
  return
// block withdraw
withdraw:
  // exit(1)
  pushint 1
  return
// block add_data
add_data:
  // exit(1)
  pushint 1
  return

// func get_next_token(content: bytes, s: int) bytes, int:
__func__get_next_token:
store 12 // s
store 13 // content
// log("get_next_token")
pushbytes "get_next_token"
log
// int e = len(content) - 1 [slot 14]
load 13 // content
len
pushint 1
-
store 14 // e
// log("s")
// log(itob(s))
// log("e")
// log(itob(e))
// for i in s:e:
  load 12 // s
  store 15 // i
  l4_for:
  load 15 // i
  load 14 // e
  ==
  bnz l4_end
  // bytes c = substring3(content, i, i+1) [slot 16]
  load 13 // content
  load 15 // i
  load 15 // i
  pushint 1
  +
  substring3
  store 16 // c
  // log("i")
  // log(itob(i))
  // log("c")
  // log(c)
  // if c == ".":
    load 16 // c
    pushbytes "."
    ==
    bz l5_end
    // then:
      // log("good")
      // log(itob(i))
      // return substring3(content, s, i), i
      load 15 // i
      load 13 // content
      load 12 // s
      load 15 // i
      substring3
      retsub
    l5_end: // end
  load 15 // i
  pushint 1
  +
  store 15 // i
  b l4_for
  l4_end: // end
// log("no good")
// return substring3(content, s, e), e
load 14 // e
load 13 // content
load 12 // s
load 14 // e
substring3
retsub

// func abi_return_int(result):
//     # log(concat("\x15\x1f\x7c\x75", result))
//     # log(result)
//     int r = result
//     teal:
//         store 0
//     end
//     log(itob(result0))
//     return
// end

// func abi_return(result: bytes):
__func__abi_return:
store 17 // result
// log(concat("\x15\x1f\x7c\x75", result))
// log(result)
load 17 // result
log
// return
retsub

// func abi_decode_string(value: bytes) bytes:
//     # return the content portion of the string, skipping the first 2 bytes which encode the length
//     return extract(2, 0, value)
// end

// func abi_encode_string(value: bytes) bytes:
//     # return the bytestring with a uint16 prefix denoting the length
//     return concat(extract(6, 2, itob(len(value))), value)
// end

// func abi_encode_uint64(value: int) bytes:
__func__abi_encode_uint64:
store 18 // value
// return itob(value)
load 18 // value
itob
retsub

// func abi_encode_uint32(value: int) bytes:
//     # return the last 4 bytes
//     return extract(4, 4, itob(value))
// end

// func abi_encode_uint16(value: int) bytes:
//     # return the last 2 bytes
//     return extract(6, 2, itob(value))
// end

// func abi_encode_uint8(value: int) bytes:
//     # return the last 1 byte
//     return extract(7, 1, itob(value))
// end

// func abi_encode_uint128(value: bytes) bytes:
//     # return 16 bytes with zero padding
//     return bzero(16) b| value
// end

// TODO assert input sizes, choose m appropriately
// func calc_type(asset_amount: int, fx: bytes) bytes:
__func__calc_type:
store 19 // fx
store 20 // asset_amount

// if fx == "SUBJECTIVE":
  load 19 // fx
  pushbytes "SUBJECTIVE"
  ==
  bz l6_end
  // then:
    // return "S"
    pushbytes "S"
    retsub
  l6_end: // end

// int m = 10000 [slot 21]
pushint 10000
store 21 // m

// int fx_n = extract_uint64(fx, 0) [slot 22]
load 19 // fx
pushint 0
extract_uint64
store 22 // fx_n
// int fx_d = extract_uint64(fx, 8) [slot 23]
load 19 // fx
pushint 8
extract_uint64
store 23 // fx_d

// bytes aa = app_global_get("a") [slot 24]
pushbytes "a"
app_global_get
store 24 // aa
// int min = btoi(substring(56, 64, aa)) [slot 25]
load 24 // aa
substring 56 64
btoi
store 25 // min
// int min_precision_n = btoi(substring(64, 72, aa)) [slot 26]
load 24 // aa
substring 64 72
btoi
store 26 // min_precision_n
// int min_precision_d = btoi(substring(72, 80, aa)) [slot 27]
load 24 // aa
substring 72 80
btoi
store 27 // min_precision_d

// int currency_quantity_after_fx = (m * (asset_amount * fx_n)) / fx_d [slot 28]
load 21 // m
load 20 // asset_amount
load 22 // fx_n
*
*
load 23 // fx_d
/
store 28 // currency_quantity_after_fx
// int chrony_upper_bound = min * (m + ((m * min_precision_n) / min_precision_d)) [slot 29]
load 25 // min
load 21 // m
load 21 // m
load 26 // min_precision_n
*
load 27 // min_precision_d
/
+
*
store 29 // chrony_upper_bound
// int chrony_lower_bound = min * (m - ((m * min_precision_n) / min_precision_d)) [slot 30]
load 25 // min
load 21 // m
load 21 // m
load 26 // min_precision_n
*
load 27 // min_precision_d
/
-
*
store 30 // chrony_lower_bound

// if currency_quantity_after_fx == 0:
  load 28 // currency_quantity_after_fx
  pushint 0
  ==
  bz l7_elif_0
  // then:
    // if chrony_lower_bound == 0:
      load 30 // chrony_lower_bound
      pushint 0
      ==
      bz l8_else
      // then:
        // return "L"
        pushbytes "L"
        retsub
      b l8_end
      l8_else:
      // else:
        // 0 lurker with 0<min is a spammer
        // exit(0)
        pushint 0
        return
      l8_end: // end
  b l7_end
  l7_elif_0:
  // elif currency_quantity_after_fx < chrony_lower_bound:
  load 28 // currency_quantity_after_fx
  load 30 // chrony_lower_bound
  <
  bz l7_elif_1
    // return "L"
    pushbytes "L"
    retsub
  b l7_end
  l7_elif_1:
  // elif chrony_upper_bound < currency_quantity_after_fx:
  load 29 // chrony_upper_bound
  load 28 // currency_quantity_after_fx
  <
  bz l7_else
    // return "H"
    pushbytes "H"
    retsub
  b l7_end
  l7_else:
  // else:
    // return "C"
    pushbytes "C"
    retsub
  l7_end: // end

// should never reach here
// exit(0)
pushint 0
return
// return "X"
pushbytes "X"
retsub
