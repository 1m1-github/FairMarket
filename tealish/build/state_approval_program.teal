#pragma version 8

// A creates bid for B with currency and data attached
// A can cancel and get currency back before
// B trades to receive currency and send receipt to A
// receipt contains data

// global
// version:int
// min_precision_n: int
// min_precision_d: int

// central smart contract
// default params
// box with user name contains own params (updatable)
// box with hash(ABNoteCurrency) is bid

// size=4*8+32+256=320

// size=32+4*8+1=65


// api
// create bid [A]
// cancel bid [A]
// trade [B]
// update params

// create bid
// if 0<min, do not allow 0 lurker
// add box

// cancel bid
// remove bid
// send currency back

// trade
// not with lurker
// remove bid

// if Txn.ApplicationID == 0:
  txn ApplicationID
  pushint 0
  ==
  bz l0_end
  // then:
    // Handle Create App
    
    // version
    // app_global_put("v", 1)
    pushbytes "v"
    pushint 1
    app_global_put
    
    // min_precision_n
    // app_global_put("mn", 1)
    pushbytes "mn"
    pushint 1
    app_global_put
    
    // min_precision_d
    // app_global_put("md", 10)
    pushbytes "md"
    pushint 10
    app_global_put
    
    // exit(1)
    pushint 1
    return
  l0_end: // end

// switch Txn.OnCompletion:
txn OnCompletion
pushint 0 // NoOp
==
bnz main
txn OnCompletion
pushint 1 // OptIn
==
bnz opt_in
txn OnCompletion
pushint 2 // CloseOut
==
bnz close_out
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz update_app
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz delete_app
err // unexpected value

// block opt_in
opt_in:
  // Disallow Opt In
  // exit(0)
  pushint 0
  return

// block close_out
close_out:
  // Disallow Closing Out
  // exit(0)
  pushint 0
  return

// block update_app
update_app:
  // Handle Update App
  // Only allow the Creator to update the app
  // assert(Txn.Sender == Global.CreatorAddress)
  txn Sender
  global CreatorAddress
  ==
  assert
  // (for now)
  // exit(1)
  pushint 1
  return

// block delete_app
delete_app:
  // Disallow Delete App
  // exit(0)
  pushint 0
  return

// block main
main:
  // safety
  // int e = Global.GroupSize-1 [slot 0]
  global GroupSize
  pushint 1
  -
  store 0 // e
  // for i in 0:e:
    pushint 0
    store 1 // i
    l1_for:
    load 1 // i
    load 0 // e
    ==
    bnz l1_end
    // assert(Gtxn[i].RekeyTo == Global.ZeroAddress)
    load 1 // i
    gtxns RekeyTo
    global ZeroAddress
    ==
    assert
    load 1 // i
    pushint 1
    +
    store 1 // i
    b l1_for
    l1_end: // end
  
  // main switch
  // switch Txn.ApplicationArgs[0]:
  txna ApplicationArgs 0
  pushbytes "create_bid"
  ==
  bnz create_bid
  txna ApplicationArgs 0
  pushbytes "cancel_bid"
  ==
  bnz cancel_bid
  txna ApplicationArgs 0
  pushbytes "trade"
  ==
  bnz trade
  txna ApplicationArgs 0
  pushbytes "update_params"
  ==
  bnz update_params
  txna ApplicationArgs 0
  pushbytes "add_data"
  ==
  bnz add_data
  err // unexpected value

// block create_bid
create_bid:
  // indices
  // int fx_call_ix = 0 [slot 0]
  pushint 0
  store 0 // fx_call_ix
  // int algo_send_ix = 1 [slot 1]
  pushint 1
  store 1 // algo_send_ix
  // int app_call_ix = 2 [slot 2]
  pushint 2
  store 2 // app_call_ix
  // int asset_send_ix = 3 [slot 3]
  pushint 3
  store 3 // asset_send_ix
  // int e = Global.GroupSize-1
  
  // check_create_bid(asset_send_ix, fx_call_ix, app_call_ix, algo_send_ix)
  load 3 // asset_send_ix
  load 0 // fx_call_ix
  load 2 // app_call_ix
  load 1 // algo_send_ix
  callsub __func__check_create_bid
  
  // opt_in(Gtxn[asset_send_ix].XferAsset)
  load 3 // asset_send_ix
  gtxns XferAsset
  callsub __func__opt_in
  
  // box_content
  // parent
  // assert(len(Txn.ApplicationArgs[1]) == 32)
  txna ApplicationArgs 1
  len
  pushint 32
  ==
  assert
  // bytes box_content = Txn.ApplicationArgs[1] [slot 4]
  txna ApplicationArgs 1
  store 4 // box_content
  // owner
  // box_content = concat(box_content, Txn.Sender)
  load 4 // box_content
  txn Sender
  concat
  store 4 // box_content
  // fairmarket
  // assert(len(Txn.ApplicationArgs[2]) == 8)
  txna ApplicationArgs 2
  len
  pushint 8
  ==
  assert
  // box_content = concat(box_content, Txn.ApplicationArgs[2])
  load 4 // box_content
  txna ApplicationArgs 2
  concat
  store 4 // box_content
  // currency_id
  // box_content = concat(box_content, itob(Gtxn[asset_send_ix].XferAsset))
  load 4 // box_content
  load 3 // asset_send_ix
  gtxns XferAsset
  itob
  concat
  store 4 // box_content
  // currency_quantity
  // box_content = concat(box_content, itob(Gtxn[asset_send_ix].AssetAmount))
  load 4 // box_content
  load 3 // asset_send_ix
  gtxns AssetAmount
  itob
  concat
  store 4 // box_content
  // bytes fx = Gtxn[fx_call_ix].LastLog [slot 5]
  load 0 // fx_call_ix
  gtxns LastLog
  store 5 // fx
  // box_content = concat(box_content, fx)
  load 4 // box_content
  load 5 // fx
  concat
  store 4 // box_content
  // bytes type = calc_type(Gtxn[asset_send_ix].AssetAmount, fx) [slot 6]
  load 3 // asset_send_ix
  gtxns AssetAmount
  load 5 // fx
  callsub __func__calc_type
  store 6 // type
  // box_content = concat(box_content, type)
  load 4 // box_content
  load 6 // type
  concat
  store 4 // box_content
  // BidWithoutNote bidWithoutNote = box_content [slot 7]
  load 4 // box_content
  store 7 // bidWithoutNote
  
  // int e = Global.GroupSize-1 [slot 8]
  global GroupSize
  pushint 1
  -
  store 8 // e
  // for i in 0:e:
    pushint 0
    store 9 // i
    l2_for:
    load 9 // i
    load 8 // e
    ==
    bnz l2_end
    // box_content = concat(box_content, Gtxn[i].Note)
    load 4 // box_content
    load 9 // i
    gtxns Note
    concat
    store 4 // box_content
    load 9 // i
    pushint 1
    +
    store 9 // i
    b l2_for
    l2_end: // end
  
  // bytes box_name = Txn.ApplicationArgs[3] [slot 9]
  txna ApplicationArgs 3
  store 9 // box_name
  // assert(len(box_name) == 32)
  load 9 // box_name
  len
  pushint 32
  ==
  assert
  // int box_existed = box_create(box_name, len(box_content)) [slot 10]
  load 9 // box_name
  load 4 // box_content
  len
  box_create
  store 10 // box_existed
  // assert(box_existed == 1)
  load 10 // box_existed
  pushint 1
  ==
  assert
  // box_replace(box_name, 0, box_content)
  load 9 // box_name
  pushint 0
  load 4 // box_content
  box_replace
  
  // exit(1)
  pushint 1
  return

// block cancel_bid
cancel_bid:
  // bytes box_name = Txn.ApplicationArgs[1]
  // int box_exists
  // bytes box_contents
  // box_exists, box_contents = box_get(box_name)
  // assert(box_exists == 1)
  
  // BidWithoutNote bid = substring(0, 105, box_contents)
  
  // assert(Txn.Sender == bid.owner)
  
  // inner_txn:
  //     TypeEnum: Axfer
  //     Sender: Global.CurrentApplicationAddress
  //     AssetReceiver: bid.owner
  //     AssetAmount: bid.currency_quantity
  //     XferAsset: bid.currency_id
  //     Fee: 0
  // end
  
  // # # opt-out if no balance? TODO (e.g. return subj currency reserve)
  // # int currency_balance
  // # currency_balance, _ = asset_holding_get(AssetBalance, 0, bid.currency_id)
  // # if currency_balance == 0:
  // #     inner_txn:
  // #         TypeEnum: Axfer
  // #         Sender: Global.CurrentApplicationAddress
  // #         AssetReceiver: bid.owner
  // #         AssetAmount: bid.currency_quantity
  // #         XferAsset: bid.currency_id
  // #         Fee: 0
  // #     end
  // # end
  
  // _ = box_del(box_name)
  
  // exit(1)
  pushint 1
  return

// block trade
trade:
  // Params p = app_global_get("a")
  
  // # send currency to owner
  // inner_txn:
  //     TypeEnum: Axfer
  //     Sender: Global.CurrentApplicationAddress
  //     AssetReceiver: p.owner
  //     AssetAmount: amount_for_owner
  //     XferAsset: bid.currency_id
  //     Fee: 0
  // end
  
  // # send currency to system
  // if 0 < amount_for_system:
  //     inner_txn:
  //         TypeEnum: Axfer
  //         Sender: Global.CurrentApplicationAddress
  //         AssetReceiver: SYSTEM_ACCOUNT
  //         AssetAmount: amount_for_system
  //         XferAsset: bid.currency_id
  //         Fee: 0
  //     end
  // end
  
  // _ = box_del(box_name)
  
  // exit(1)
  pushint 1
  return

// block update_params
update_params:
  
  
  // exit(1)
  pushint 1
  return

// block add_data
add_data:
  // exit(1)
  pushint 1
  return

// func default_params() Params:
__func__default_params:
// return
retsub

// TODO assert input sizes, choose m appropriately
// func calc_type(asset_amount: int, fx: bytes) bytes:
__func__calc_type:
store 11 // fx
store 12 // asset_amount

// int fx_d = extract_uint64(fx, 8)
// if fx_d == 0:
//     return "S"
// end
// int fx_n = extract_uint64(fx, 0)

// int m = 10000

// Params p = app_global_get("a")

// int currency_quantity_after_fx = (m * (asset_amount * fx_n)) / fx_d
// int chrony_upper_bound = p.min * (m + ((m * p.min_precision_n) / p.min_precision_d))
// int chrony_lower_bound = p.min * (m - ((m * p.min_precision_n) / p.min_precision_d))

// if currency_quantity_after_fx == 0:
//     if chrony_lower_bound == 0:
//         return "L"
//     else:
//         # 0 lurker with 0<min is a spammer
//         exit(0)
//     end
// elif currency_quantity_after_fx < chrony_lower_bound:
//     return "L"
// elif chrony_upper_bound < currency_quantity_after_fx:
//     return "H"
// else:
//     return "C"
// end

// should never reach here
// exit(0)
pushint 0
return
// return "X"
pushbytes "X"
retsub

// func opt_in(asset_id: int):
__func__opt_in:
store 13 // asset_id
// int is_opted_in [slot 14]
// is_opted_in, _ = asset_holding_get(AssetBalance, Global.CurrentApplicationAddress, asset_id)
global CurrentApplicationAddress
load 13 // asset_id
asset_holding_get AssetBalance
store 14 // is_opted_in
pop // discarding value for _
// if is_opted_in == 0:
  load 14 // is_opted_in
  pushint 0
  ==
  bz l3_end
  // then:
    // inner_txn:
    itxn_begin
      // TypeEnum: Axfer
      pushint 4 // Axfer
      itxn_field TypeEnum
      // Sender: Global.CurrentApplicationAddress
      global CurrentApplicationAddress
      itxn_field Sender
      // AssetReceiver: Global.CurrentApplicationAddress
      global CurrentApplicationAddress
      itxn_field AssetReceiver
      // AssetAmount: 0
      pushint 0
      itxn_field AssetAmount
      // XferAsset: asset_id
      load 13 // asset_id
      itxn_field XferAsset
      // Fee: 0
      pushint 0
      itxn_field Fee
    itxn_submit
    // end inner_txn
  l3_end: // end
// return
retsub

// func check_create_bid(asset_send_ix: int, fx_call_ix: int, app_call_ix: int, algo_send_ix: int):
__func__check_create_bid:
store 15 // algo_send_ix
store 16 // app_call_ix
store 17 // fx_call_ix
store 18 // asset_send_ix
// assert(Gtxn[asset_send_ix].TypeEnum == Axfer)
load 18 // asset_send_ix
gtxns TypeEnum
pushint 4 // Axfer
==
assert
// assert(Gtxn[asset_send_ix].AssetReceiver == Global.CurrentApplicationAddress)
load 18 // asset_send_ix
gtxns AssetReceiver
global CurrentApplicationAddress
==
assert
// assert(Gtxn[fx_call_ix].TypeEnum == Appl)
load 17 // fx_call_ix
gtxns TypeEnum
pushint 6 // Appl
==
assert
// assert(Gtxn[fx_call_ix].Sender == Gtxn[asset_send_ix].Sender)
load 17 // fx_call_ix
gtxns Sender
load 18 // asset_send_ix
gtxns Sender
==
assert
// assert(Gtxn[fx_call_ix].ApplicationID == FX_APP)
load 17 // fx_call_ix
gtxns ApplicationID
pushint 178969021 // FX_APP
==
assert
// assert(Gtxn[asset_send_ix].XferAsset == Gtxn[fx_call_ix].Assets[0])
load 18 // asset_send_ix
gtxns XferAsset
load 17 // fx_call_ix
gtxnsa Assets 0
==
assert
// assert(Txn.GroupIndex == app_call_ix)
txn GroupIndex
load 16 // app_call_ix
==
assert
// assert(Txn.Sender == Gtxn[asset_send_ix].Sender)
txn Sender
load 18 // asset_send_ix
gtxns Sender
==
assert
// assert(Gtxn[algo_send_ix].TypeEnum == Pay)
load 15 // algo_send_ix
gtxns TypeEnum
pushint 1 // Pay
==
assert
// assert(Gtxn[algo_send_ix].Sender == Gtxn[asset_send_ix].Sender)
load 15 // algo_send_ix
gtxns Sender
load 18 // asset_send_ix
gtxns Sender
==
assert
// assert(Gtxn[algo_send_ix].Receiver == Global.CurrentApplicationAddress)
load 15 // algo_send_ix
gtxns Receiver
global CurrentApplicationAddress
==
assert
// int e = Global.GroupSize - 1 [slot 19]
global GroupSize
pushint 1
-
store 19 // e
// for i in 4:e:
  pushint 4
  store 20 // i
  l4_for:
  load 20 // i
  load 19 // e
  ==
  bnz l4_end
  // assert(Gtxn[i].TypeEnum == Appl)
  load 20 // i
  gtxns TypeEnum
  pushint 6 // Appl
  ==
  assert
  load 20 // i
  pushint 1
  +
  store 20 // i
  b l4_for
  l4_end: // end
// return
retsub
